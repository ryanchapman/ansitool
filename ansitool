#!/bin/bash -
#
# ansitool - Tool to build standalone Ansible packages
#
# Takes an ansible directory and packages it up into a single file that
# can be copied to remote hosts and executed.  Keeps things simple:
#  1. You can use this tool on the actual machine you are trying to automate
#     and iterate over your process.  Once you are happy, copy the directory
#     structure to source control.
#  2. This tool can be integrated into your continuous build environment
#     (e.g. TravisCI, CircleCI, Jenkins, etc.) since it isn't coupled to
#     a central server (like s*lt and p*pp*t require).
#
#  This really should be rewritten in golang, but for now it's bash because
#  it's fast to write.
#
# Ryan Chapman, ryan@rchapman.org
# Sun Nov  6 00:10:54 UTC 2016
#
# Copyright (C) 2016 Ryan A. Chapman. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#   1. Redistributions of source code must retain the above copyright notice,
#      this list of conditions and the following disclaimer.
#
#   2. Redistributions in binary form must reproduce the above copyright notice,
#      this list of conditions and the following disclaimer in the documentation
#      and/or other materials provided with the distribution.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
# FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHORS
# OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

TRUE=0
FALSE=1

BOLD="$(tput bold)"
CLR="$(tput sgr0)"
RED="$(tput setaf 1 0)"
GREEN="$(tput setaf 10 0)"
CYAN="$(tput setaf 14 0)"

UPDATE_URL="https://raw.githubusercontent.com/ryanchapman/ansitool/master/ansitool"

function logit
{
    if [[ "${1}" == "FATAL" ]]; then
        fatal="FATAL"
        shift
    fi
    echo -n "$(date '+%b %d %H:%M:%S.%N %Z') $(basename -- $0)[$$]: "
    if [[ "${fatal}" == "FATAL" ]]; then echo -n "${RED}${fatal} "; fi
    echo "$*"
    if [[ "${fatal}" == "FATAL" ]]; then echo -n "${CLR}"; exit 1; fi
}

function _exec
{
    if [[ $1 == fatal ]]; then
        errors_fatal=$TRUE
    else
        errors_fatal=$FALSE
    fi
    shift
    logit "${BOLD}$*${CLR}"
    eval "$*"
    rc=$?
    if [[ $rc != 0 ]]; then
        msg="${BOLD}${RED}$*${CLR}${RED} returned $rc${CLR}"
    else
        msg="${BOLD}${GREEN}$*${CLR}${GREEN} returned $rc${CLR}"
    fi
    logit "${BOLD}$msg${CLR}"
    # fail hard and fast
    if [[ $rc != 0 && $errors_fatal == $TRUE ]]; then
        pwd
        exit 1
    fi
    return $rc
}

function exec_ignerr
{
    _exec warn $*
}

function exec
{
    _exec fatal $*
}

function file_append
{
    local file="${1}"
    local str="${2}"
    echo "${str}" >> ${file}
}

function deps
{
    logit "Checking if we need to install a version of ansible newer than 2.2"
    if (ansible-playbook --version | grep ansible-playbook | egrep '(2\.[23456789]|[3-9]\.)') &>/dev/null; then
        logit "Checking if we need to install a version of ansible newer than 2.2: not needed."
    else
        logit "Checking if we need to install a version of ansible newer than 2.2: yes"
        if which lsb_release &>/dev/null; then
            if [[ $(lsb_release -a) =~ "Ubuntu" ]]; then
                logit "Installing latest version of Ansible"
                exec "sudo apt-get -y install software-properties-common"
                exec "sudo apt-add-repository -y ppa:ansible/ansible"
                exec "sudo apt-get -y update"
                exec "sudo apt-get -y install ansible"
                logit "Installing latest version of Ansible: done"
            fi
        elif [[ "$(uname -a)" =~ "Darwin" ]]; then
            logit "Installing latest version of Ansible"
            exec "brew install ansible"
            logit "Installing latest version of Ansible: done"
        else
            logit FATAL "Don't know how to install ansible on operating system.  Feel free to add support in the deps() function"
        fi
        logit "Checking if we need to install a version of ansible newer than 2.2: done."
    fi
}

function newrole
{
    local rolename="$1"
    if [[ -d roles/$rolename ]]; then
        logit FATAL "Role $rolename already exists."
    fi
    mkdir -p roles/$rolename/
    mkdir -p roles/$rolename/files
    mkdir -p roles/$rolename/tasks
    file_append roles/$rolename/tasks/main.yml "---"
    file_append roles/$rolename/tasks/main.yml "- name: Display all variables for localhost"
    file_append roles/$rolename/tasks/main.yml "  debug: var=hostvars[inventory_hostname] verbosity=3"
}

function new
{
    if [[ "$1" == "role" ]]; then
        if [[ "$2" == "" ]]; then
            logit FATAL "You must specify the new role you want to create ($(basename $0) new role rolename)"
        fi
        newrole "$2"
        logit "New ansible role $2 created."
    else
        if [[ -f main.yml ]]; then
            logit FATAL "Cannot create new application. main.yml already exists. Remove it manually if you'd like to create a new application."
        fi
        if [[ -f hosts ]]; then
            logit FATAL "Cannot create new application. hosts already exists. Remove it manually if you'd like to create a new application."
        fi
        if [[ -d roles/main_role ]]; then
            logit FATAL "Cannot create new application. Role main_role already exists. Remove it manually if you'd like to create a new application."
        fi
        file_append main.yml "---"
        file_append main.yml "- hosts: localhost"
        file_append main.yml "  roles:"
        file_append main.yml "    - main_role"
        file_append hosts "[targets]"
        file_append hosts "localhost    ansible_connection=local"
        newrole main_role
        logit "New ansible application with role main_role created."
    fi
}

function pack
{
    local packfile=$(mktemp /tmp/XXX-XXX.tar.gz)
    logit "Building pack in $packfile"
    exec "if [[ -f pack.bash ]]; then rm -f pack.bash; fi"
    exec "tar --exclude=.git --exclude=*.swp -zcvf $packfile ."
    file_append pack.bash "#!/bin/bash -"
    file_append pack.bash "tmpdir=\$(mktemp -d /tmp/XXXXXX)"
    file_append pack.bash "mkdir -p \$tmpdir"
    file_append pack.bash "echo \"Extracting files into \$tmpdir\""
    file_append pack.bash "SELF=\$(pwd)/\$0"
    file_append pack.bash "SKIP=\$(awk '/^__BEGIN_TARBALL__/ { print NR + 1; exit 0; }' \$SELF)"
    file_append pack.bash "tail -n +\$SKIP \$SELF | tar -C \$tmpdir -zxvf -"
    file_append pack.bash "oldcwd=\$(pwd)"
    file_append pack.bash "echo cd \$tmpdir"
    file_append pack.bash "cd \$tmpdir"
    file_append pack.bash "if ansible-playbook --version | grep ansible-playbook | egrep '(2\.[23456789]|[3-9]\.)' &>/dev/null; then"
    file_append pack.bash "  echo \"skipping update of ansible, not needed (you have at least version 2.2)\""
    file_append pack.bash "else"
    file_append pack.bash "  echo sudo bash ansitool deps"
    file_append pack.bash "  sudo bash ansitool deps"
    file_append pack.bash "fi"
    file_append pack.bash "echo sudo bash ansitool run"
    file_append pack.bash "sudo bash ansitool run"
    file_append pack.bash "echo cd \$oldcwd"
    file_append pack.bash "cd \$oldcwd"
    file_append pack.bash "[ -d \${tmpdir} ] && echo \"Cleaning up directory \${tmpdir}\" && rm -rf \${tmpdir:-/tmp/XXXXXXXX/XXXXXX}"
    file_append pack.bash "exit 0"
    file_append pack.bash "__BEGIN_TARBALL__"
    exec "cat $packfile >> pack.bash"
    exec "rm -f $packfile"
    logit "Building pack in $packfile: done"
}

function run
{
    local param="${1}"
    local verbosity="${2:-3}"   # default verbosity is 3
    local extra_args=""
    local playbook_yaml=""
    local tmpf=""
    local role_name=""
    local post=""
    if [[ "$param" =~ "debug" ]]; then
        extra_args="-"
        extra_args+="$(i=0; while [[ $i != $verbosity ]]; do printf "v"; i=$((i+1)); done)"
        playbook_yaml="main.yml"
    elif [[ "$param" =~ "role" ]]; then
        role_name="${2}"
        tmpf="$(mktemp ./XXXXXXX)"
        file_append $tmpf "---"
        file_append $tmpf "- hosts: localhost"
        file_append $tmpf "  roles:"
        file_append $tmpf "    - $role_name"
        playbook_yaml="$tmpf"
        trap "rm -f ${tmpf} ${tmpf}.retry" SIGINT SIGTERM EXIT
    fi
    if ! $(which ansible-playbook &>/dev/null); then
        logit FATAL "ansible-playbook binary not found (have you installed Ansible with \"$(basename $0) deps\" yet?)"
    fi
    exec "ansible-playbook --inventory-file ./hosts ${playbook_yaml} ${extra_args}"
}

function update
{
    logit "Updating ansitool"
    exec "curl -o ansitool.new ${UPDATE_URL}"
    exec "mv ansitool.new ansitool"
    exec "chmod +x ansitool"
    logit "Updating ansitool: done"
}

function usage
{
    echo "usage: $(basename $0) <command> [arguments]"
    echo
    echo "Commands:"
    echo
    echo "    deps            Install dependencies on local machine (latest Ansible)"
    echo "    new             Create a new ansible standalone application"
    echo "    new role <name> Create a new role in the directory ./roles/name/"
    echo "    pack            Builds a new ansible pack for distribution"
    echo "    run             Run the standalone ansible application locally"
    echo "    run debug [N]   Run the standalone ansible application in debug mode locally at verbosity level N (default=3)."
    echo "    run role <name> Run the standalone ansible application locallyi, but only the role specified"
    echo "    update          Update to the latest version of ansitool"
    echo
}

#################################
# main
#################################

function main () {
    if [[ "${1}" == "" ]]; then
        usage
        exit 1
    fi
    func_to_exec=${1}
    type ${func_to_exec} 2>&1 | grep -q 'function' >&/dev/null || {
        logit "$(basename $0): ERROR: function '${func_to_exec}' not found."
        usage
        exit 1
    }

    shift
    ${func_to_exec} $*
    echo
}

# did someone source this file or execute it directly?  If not sourced, then we are responsible for
# executing main().  Files sourcing this one are responsible for calling main()
sourced=$FALSE
[ "$0" = "$BASH_SOURCE" ] || sourced=$TRUE

if [[ $sourced == $FALSE ]]; then
    main $*
fi
